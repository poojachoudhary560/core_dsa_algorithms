// given n boxes and r items (un-identical), arrange r items in n boxes

function printPermutations(boxesCount, objects) {
  let boxes = Array(boxesCount).fill(0);
  solution(boxes, objects, index);
}

function solution(boxes, obj, currentObject) {
  if (currentObject > obj) {
    console.log(JSON.stringify(boxes));
    return;
  }
  for (let i = 0; i < boxes.length; i++) {
    if (boxes[i] === 0) {
      boxes[i] = currentObject;
      solution(boxes, obj, currentObject + 1);
      boxes[i] = 0;
    }
  }
}

printPermutations(5, 3);

// [1,2,3,0,0]
// [1,2,0,3,0]
// [1,2,0,0,3]
// [1,3,2,0,0]
// [1,0,2,3,0]
// [1,0,2,0,3]
// [1,3,0,2,0]
// [1,0,3,2,0]
// [1,0,0,2,3]
// [1,3,0,0,2]
// [1,0,3,0,2]
// [1,0,0,3,2]
// [2,1,3,0,0]
// [2,1,0,3,0]
// [2,1,0,0,3]
// [3,1,2,0,0]
// [0,1,2,3,0]
// [0,1,2,0,3]
// [3,1,0,2,0]
// [0,1,3,2,0]
// [0,1,0,2,3]
// [3,1,0,0,2]
// [0,1,3,0,2]
// [0,1,0,3,2]
// [2,3,1,0,0]
// [2,0,1,3,0]
// [2,0,1,0,3]
// [3,2,1,0,0]
// [0,2,1,3,0]
// [0,2,1,0,3]
// [3,0,1,2,0]
// [0,3,1,2,0]
// [0,0,1,2,3]
// [3,0,1,0,2]
// [0,3,1,0,2]
// [0,0,1,3,2]
// [2,3,0,1,0]
// [2,0,3,1,0]
// [2,0,0,1,3]
// [3,2,0,1,0]
// [0,2,3,1,0]
// [0,2,0,1,3]
// [3,0,2,1,0]
// [0,3,2,1,0]
// [0,0,2,1,3]
// [3,0,0,1,2]
// [0,3,0,1,2]
// [0,0,3,1,2]
// [2,3,0,0,1]
// [2,0,3,0,1]
// [2,0,0,3,1]
// [3,2,0,0,1]
// [0,2,3,0,1]
// [0,2,0,3,1]
// [3,0,2,0,1]
// [0,3,2,0,1]
// [0,0,2,3,1]
// [3,0,0,2,1]
// [0,3,0,2,1]
// [0,0,3,2,1]
